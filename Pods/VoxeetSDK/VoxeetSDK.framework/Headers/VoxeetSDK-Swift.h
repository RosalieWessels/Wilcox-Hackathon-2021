// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef VOXEETSDK_SWIFT_H
#define VOXEETSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import UserNotifications;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VoxeetSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSStream;

SWIFT_CLASS("_TtC9VoxeetSDK16FoundationStream")
@interface FoundationStream : NSObject <NSStreamDelegate>
/// Delegate for the stream methods. Processes incoming bytes
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@class NSBundle;

SWIFT_CLASS("_TtC9VoxeetSDK12VTAudioSound") SWIFT_AVAILABILITY(ios,obsoleted=1)
@interface VTAudioSound : NSObject
/// If true, looping on the current sound.
@property (nonatomic) BOOL loop;
/// The volume of the audio file. The range of valid values are from 0.0 to 1.0.
@property (nonatomic) float volume;
/// The angle of the audio file. The range of valid values are from -1.0 to 1.0.
@property (nonatomic) float angle;
/// The distance of the audio file. The range of valid values are from 0.0 to 1.0.
@property (nonatomic) float distance;
/// Initializing a new VTAudioSound. The audio file must be mono to get a 3D mixing properties.
/// \param fileURL File path URL.
///
- (nullable instancetype)initWithFileURL:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initializing a new VTAudioSound. The audio file must be mono to get a 3D mixing properties.
/// \param name File’s name.
///
/// \param ext File’s extension (mp3, wav, …).
///
/// \param bundle Current bundle.
///
- (nullable instancetype)initForResource:(NSString * _Nonnull)name ofType:(NSString * _Nonnull)ext bundle:(NSBundle * _Nullable)bundle error:(NSError * _Nullable * _Nullable)error;
/// Play the audio file.
/// \param completion A block object to be executed when the sound has finished playing. This block has no return value.
///
- (BOOL)playAndReturnError:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(void))completion;
- (void)pause;
/// Stop the audio file.
- (void)stop;
/// Get the current time of the playing sound.
///
/// returns:
/// current time in second
- (double)currentTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VoxeetSDK18VTBaseNotification")
@interface VTBaseNotification : NSObject
/// Conference id.
@property (nonatomic, readonly, copy) NSString * _Nonnull conferenceID;
/// Conference alias.
@property (nonatomic, readonly, copy) NSString * _Nonnull conferenceAlias;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VTParticipant;

SWIFT_PROTOCOL("_TtP9VoxeetSDK17VTCommandDelegate_")
@protocol VTCommandDelegate
/// Emitted when a message is received.
- (void)receivedWithParticipant:(VTParticipant * _Nonnull)participant message:(NSString * _Nonnull)message;
@end

@class NSError;

SWIFT_CLASS("_TtC9VoxeetSDK16VTCommandService")
@interface VTCommandService : NSObject
/// Conference delegate.
@property (nonatomic, weak) id <VTCommandDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Sends messages as raw strings of any type (including JSON, XML, simple string) to all conference participants. To receive a broadcast message, use the <code>messageReceived</code> method from <code>VTConferenceDelegate</code>.
/// \param message The message to broadcast as a raw string.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)sendWithMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

@class VTConferenceParameters;
enum VTConferenceStatus : NSInteger;

SWIFT_CLASS("_TtC9VoxeetSDK12VTConference")
@interface VTConference : NSObject
/// Gets the live conference ID (Voxeet internal identifier).
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Gets the live conference alias.
@property (nonatomic, readonly, copy) NSString * _Nonnull alias;
/// Check if the created conference is new or was already initialized.
@property (nonatomic, readonly) BOOL isNew;
/// Gets all current conference’s participants.
@property (nonatomic, readonly, copy) NSArray<VTParticipant *> * _Nonnull participants;
/// Conference parameters.
@property (nonatomic, readonly, strong) VTConferenceParameters * _Nonnull params;
/// Conference status.
@property (nonatomic, readonly) enum VTConferenceStatus status;
/// Provides the pin code of the conference.
@property (nonatomic, readonly, copy) NSString * _Nullable pinCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VoxeetSDK31VTConferenceCreatedNotification")
@interface VTConferenceCreatedNotification : VTBaseNotification
@end


SWIFT_PROTOCOL("_TtP9VoxeetSDK26VTConferenceCryptoDelegate_") SWIFT_DEPRECATED_MSG("With the new Dolby library, `VTConferenceCryptoDelegate` is no longer supported (will soon be obsolete).")
@protocol VTConferenceCryptoDelegate
- (NSInteger)encryptWithType:(NSInteger)type ssrc:(NSInteger)ssrc frame:(uint8_t const * _Nonnull)frame frameSize:(NSInteger)frameSize encryptedFrame:(uint8_t * _Nonnull)encryptedFrame encryptedFrameSize:(NSInteger)encryptedFrameSize SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("With the new Dolby library, `VTConferenceCryptoDelegate` is no longer supported (will soon be obsolete).");
- (NSInteger)getMaxCiphertextByteSizeWithType:(NSInteger)type size:(NSInteger)size SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("With the new Dolby library, `VTConferenceCryptoDelegate` is no longer supported (will soon be obsolete).");
- (NSInteger)decryptWithType:(NSInteger)type ssrc:(NSInteger)ssrc encryptedFrame:(uint8_t const * _Nonnull)encryptedFrame encryptedFrameSize:(NSInteger)encryptedFrameSize frame:(uint8_t * _Nonnull)frame frameSize:(NSInteger)frameSize SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("With the new Dolby library, `VTConferenceCryptoDelegate` is no longer supported (will soon be obsolete).");
- (NSInteger)getMaxPlaintextByteSizeWithType:(NSInteger)type size:(NSInteger)size SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("With the new Dolby library, `VTConferenceCryptoDelegate` is no longer supported (will soon be obsolete).");
@end

@class MediaStream;

SWIFT_PROTOCOL("_TtP9VoxeetSDK20VTConferenceDelegate_")
@protocol VTConferenceDelegate
- (void)statusUpdatedWithStatus:(enum VTConferenceStatus)status;
/// Called when participant’s permissions are updated.
/// \code
/// var conferencePermissions = [VTConferencePermission]()
/// for permission in permissions {
///     if let conferencePermission = VTConferencePermission(rawValue: permission) {
///         conferencePermissions.append(conferencePermission)
///     }
/// }
///
/// \endcode\param permissions Must be cast from <code>[Int]</code> to <code>[VTConferencePermission]</code> (an array of enum can’t be represented in Objective-C, see sample code above in discussion).
///
- (void)permissionsUpdatedWithPermissions:(NSArray<NSNumber *> * _Nonnull)permissions;
- (void)participantAddedWithParticipant:(VTParticipant * _Nonnull)participant;
- (void)participantUpdatedWithParticipant:(VTParticipant * _Nonnull)participant;
- (void)streamAddedWithParticipant:(VTParticipant * _Nonnull)participant stream:(MediaStream * _Nonnull)stream;
- (void)streamUpdatedWithParticipant:(VTParticipant * _Nonnull)participant stream:(MediaStream * _Nonnull)stream;
- (void)streamRemovedWithParticipant:(VTParticipant * _Nonnull)participant stream:(MediaStream * _Nonnull)stream;
@end


SWIFT_CLASS("_TtC9VoxeetSDK29VTConferenceEndedNotification")
@interface VTConferenceEndedNotification : VTBaseNotification
@end

typedef SWIFT_ENUM(NSInteger, VTConferenceMode, open) {
  VTConferenceModeStandard = 0,
  VTConferenceModeListen = 1,
  VTConferenceModeReplay = 2,
};

@class NSNumber;

SWIFT_CLASS("_TtC9VoxeetSDK19VTConferenceOptions")
@interface VTConferenceOptions : NSObject
/// Conference alias.
@property (nonatomic, copy) NSString * _Nullable alias;
/// Conference parameters.
@property (nonatomic, readonly, strong) VTConferenceParameters * _Nonnull params;
/// Conference pin code.
@property (nonatomic, strong) NSNumber * _Nullable pinCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK22VTConferenceParameters")
@interface VTConferenceParameters : NSObject
/// Records the conference in live.
@property (nonatomic) BOOL liveRecording;
/// Bitrate adaptation mode.
@property (nonatomic, copy) NSString * _Nullable rtcpMode;
/// Enables / Disables conference statistics.
@property (nonatomic) BOOL stats;
/// Time to live.
@property (nonatomic, strong) NSNumber * _Nullable ttl;
/// Conference video codec (H264/VP8) defaults to H264.
@property (nonatomic, copy) NSString * _Nullable videoCodec;
/// Enables / Disables Dolby Voice.
@property (nonatomic) BOOL dolbyVoice;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VTConferencePermission, open) {
  VTConferencePermissionInvite = 0,
  VTConferencePermissionKick = 1,
  VTConferencePermissionUpdatePermissions = 2,
  VTConferencePermissionJoin = 3,
  VTConferencePermissionSendAudio = 4,
  VTConferencePermissionSendVideo = 5,
  VTConferencePermissionShareScreen = 6,
  VTConferencePermissionShareVideo = 7,
  VTConferencePermissionShareFile = 8,
  VTConferencePermissionSendMessage = 9,
  VTConferencePermissionRecord = 10,
  VTConferencePermissionStream = 11,
};

@class VTJoinOptions;
@class VTListenOptions;
@class VTReplayOptions;
@class VTParticipantQuality;
@class VTParticipantPermissions;

SWIFT_CLASS("_TtC9VoxeetSDK19VTConferenceService")
@interface VTConferenceService : NSObject
/// Conference delegate.
@property (nonatomic, weak) id <VTConferenceDelegate> _Nullable delegate;
/// Current conference model.
@property (nonatomic, readonly, strong) VTConference * _Nullable current;
/// Conference mode.
@property (nonatomic, readonly) enum VTConferenceMode mode;
/// The maximum number of video streams that may be transmitted for a conference.
@property (nonatomic, readonly) NSInteger maxVideoForwarding;
/// The default behavior (false) start the conference on the built in receiver. If true, it will start on the built in speaker.
@property (nonatomic) BOOL defaultBuiltInSpeaker;
/// The default behavior (false) start the conference without video. If true, it will enable the video at conference start.
@property (nonatomic) BOOL defaultVideo;
@property (nonatomic) BOOL audio3D SWIFT_DEPRECATED_MSG("With the new Dolby library, 3D audio is automatically enabled with `dolbyVoice` conferences (will soon be obsolete).");
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable constraints SWIFT_AVAILABILITY(ios,obsoleted=1,message="With the new Dolby library, video constraints are no longer supported.");
@property (nonatomic, weak) id <VTConferenceCryptoDelegate> _Nullable cryptoDelegate SWIFT_DEPRECATED_MSG("With the new Dolby library, `cryptoDelegate` is no longer supported (will soon be obsolete).");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a conference. You can call <code>join</code> method if creation succeeds.
/// \param options Options to pass when a conference is created.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)createWithOptions:(VTConferenceOptions * _Nullable)options success:(void (^ _Nullable)(VTConference * _Nonnull))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Joins the created conference.
/// \param conference Conference model retrieved from <code>create</code> response.
///
/// \param options Options to pass when a conference is joined.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)joinWithConference:(VTConference * _Nonnull)conference options:(VTJoinOptions * _Nullable)options success:(void (^ _Nullable)(VTConference * _Nonnull))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Listen a conference.
/// \param conference Conference model retrieved from <code>create</code> response.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)listenWithConference:(VTConference * _Nonnull)conference options:(VTListenOptions * _Nullable)options success:(void (^ _Nullable)(VTConference * _Nonnull))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Creates a Voxeet demo conference.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)demoWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)fetchWithConferenceID:(NSString * _Nonnull)conferenceID completion:(SWIFT_NOESCAPE void (^ _Nonnull)(VTConference * _Nonnull))completion;
/// Leaves the current conference.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)leaveWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Retrieves the status of specified conference.
/// \param conference The conference whose status you want to retrieve.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)statusWithConference:(VTConference * _Nonnull)conference success:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Replays a recording conference (needs to start and stop a record before).
/// \param conference The conference you want to replay.
///
/// \param VTReplayOptions The recording options. Contains offset from the beginning of the conference. In milliseconds (default <code>0</code>) and conferenceAccessToken used for conference operations.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)replayWithConference:(VTConference * _Nonnull)conference options:(VTReplayOptions * _Nullable)options completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Mutes or unmutes oneself.
/// \param isMuted <code>true</code> if user is muted. Otherwise, <code>false</code>.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)mute:(BOOL)isMuted completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Mutes or unmutes the specified user (only compatible with none Dolby Voice conferences for remote participants).
/// \param participant the participant you want to mute.
///
/// \param isMuted <code>true</code> if user is muted. Otherwise, <code>false</code>.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)muteWithParticipant:(VTParticipant * _Nonnull)participant isMuted:(BOOL)isMuted completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Mutes or unmutes output (only compatible with Dolby Voice conferences).
/// \param isMuted <code>true</code> if user mutes output. Otherwise, <code>false</code>.
///
- (void)muteOutput:(BOOL)isMuted completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Gets the current mute state of the local participant.
///
/// returns:
/// the mute state. Returns <code>false</code>, if the participant is not at the conference or is not muted. Returns <code>true</code>, if the participant is muted.
- (BOOL)isMuted SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the specified user’s current audio level, normalized between <code>0.0</code> and <code>1.0</code>.
/// \param participant The participant whose level you want to retrieve.
///
///
/// returns:
/// The user’s current voice level, between <code>0.0</code> and <code>1.0</code>.
- (float)audioLevelWithParticipant:(VTParticipant * _Nonnull)participant SWIFT_WARN_UNUSED_RESULT;
/// Informs if the specific conference participant is speaking.
/// \param participant The participant whose level you want to retrieve.
///
///
/// returns:
/// The boolean indicating if the participant is speaking.
- (BOOL)isSpeakingWithParticipant:(VTParticipant * _Nonnull)participant SWIFT_WARN_UNUSED_RESULT;
/// Starts the audio for the specified user (only compatible with none Dolby Voice conferences for remote participants).
/// \param participant The participant whose audio you want to start.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startAudioWithParticipant:(VTParticipant * _Nullable)participant completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stops audio for the specified user (only compatible with none Dolby Voice conferences for remote participants).
/// \param participant The participant whose audio you want to stop.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopAudioWithParticipant:(VTParticipant * _Nullable)participant completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Starts the video for the specified participant.
/// \param participant The participant whose video you want to start.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startVideoWithParticipant:(VTParticipant * _Nullable)participant completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Starts the video for the specified participant.
/// \param participant The participant whose video you want to start.
///
/// \param isDefaultFrontFacing Choose between default front or back camera.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startVideoWithParticipant:(VTParticipant * _Nullable)participant isDefaultFrontFacing:(BOOL)isDefaultFrontFacing completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stops video for the specified user.
/// \param participant The ID for the user whose video you want to stop.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopVideoWithParticipant:(VTParticipant * _Nullable)participant completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Start a video screen share of the application.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startScreenShareWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)startScreenShareWithBroadcast:(BOOL)broadcast completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Stop a video screen share of the application.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopScreenShareWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Gets local WebRTC stats for a specific participant.
/// \param participant The participant whose local WebRTC stats you want to retrieve.
///
///
/// returns:
/// Participant information in a <code>Array</code>.
- (NSArray<NSDictionary<NSString *, id> *> * _Nullable)localStatsWithParticipant:(VTParticipant * _Nonnull)participant SWIFT_WARN_UNUSED_RESULT;
/// Gets local WebRTC stats.
///
/// returns:
/// All information in a <code>Dictionary</code>.
- (NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nullable)localStats SWIFT_WARN_UNUSED_RESULT;
/// Request the specified simulcast quality for a given list of participants.
/// \param requested An array of quality per participant.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)simulcastWithRequested:(NSArray<VTParticipantQuality *> * _Nonnull)requested completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Enables or disables audio processing.
/// \param enable <code>true</code> to enable audio processing. Otherwise, <code>false</code> to disable audio processing.
///
- (void)audioProcessingWithEnable:(BOOL)enable;
/// Allows customizing the number of the received video streams and prioritizing the selected participants’ video streams transmission.
/// \param max The maximum number of video streams that may be transmitted for a conference.
///
/// \param participants The list of participants whose video streams you want to display.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)videoForwardingWithMax:(NSInteger)max participants:(NSArray<VTParticipant *> * _Nullable)participants completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Kicks the participant from a conference.
/// \param participant Remote participant to kick.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)kickWithParticipant:(VTParticipant * _Nonnull)participant completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Updates conference permissions of a participant.
/// \param participantPermissions Participants whose conference permissions are updated.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)updatePermissionsWithParticipantPermissions:(NSArray<VTParticipantPermissions *> * _Nonnull)participantPermissions completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


@interface VTConferenceService (SWIFT_EXTENSION(VoxeetSDK)) <MediaEngineDelegate>
- (void)audioRouteChanged:(NSNumber * _Nonnull)route;
- (void)sessionCreatedForPeer:(NSString * _Nonnull)peerId withType:(NSString * _Nonnull)type andSdp:(NSString * _Nonnull)sdp;
- (void)iceGatheringCompletedForPeer:(NSString * _Nonnull)peerId withCandidates:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)candidates;
- (void)printTraceWithLevel:(int32_t)level withMessage:(int8_t const * _Nonnull)message ofLength:(int32_t)length;
- (void)callBackOnChannel:(int32_t)channel withErrorCode:(int32_t)errCode;
- (void)streamAddedForPeer:(NSString * _Nonnull)peerId withStream:(MediaStream * _Nonnull)mediaStream;
- (void)streamUpdatedForPeer:(NSString * _Nonnull)peerId withStream:(MediaStream * _Nonnull)mediaStream;
- (void)streamRemovedForPeer:(NSString * _Nonnull)peerId withStream:(MediaStream * _Nonnull)mediaStream;
- (void)screenStreamAddedForPeer:(NSString * _Nonnull)peerId withStream:(MediaStream * _Nonnull)mediaStream;
- (void)screenStreamRemovedForPeer:(NSString * _Nonnull)peerId withStream:(MediaStream * _Nonnull)mediaStream;
- (void)dvcErrorForPeer:(NSString * _Nonnull)peerId errorType:(NSString * _Nonnull)errorType;
- (void)connectionErrorForPeer:(NSString * _Nonnull)peerId errorType:(NSString * _Nonnull)type;
@end


@interface VTConferenceService (SWIFT_EXTENSION(VoxeetSDK))
- (void)replayWithConference:(VTConference * _Nonnull)conference completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("You can now use the VTReplayOptions object to provide offset and specific conferenceAccessToken.", "replayWithConference:options:completion:");
- (void)replayWithConference:(VTConference * _Nonnull)conference offset:(NSInteger)offset completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("You can now use the VTReplayOptions object to provide offset and specific conferenceAccessToken.", "replayWithConference:options:completion:");
- (void)declineWithConference:(VTConference * _Nonnull)conference completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("You can now use the notification service object to decline a call `VoxeetSDK.shared.notification.decline`.", "declineWithConference:completion:");
- (void)positionWithParticipant:(VTParticipant * _Nonnull)participant angle:(double)angle distance:(double)distance SWIFT_DEPRECATED_MSG("With the new Dolby library, setting participant's 3D audio position is no longer supported (will soon be obsolete).");
- (void)historyWithConference:(VTConference * _Nonnull)conference success:(void (^ _Nullable)(NSArray * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_AVAILABILITY(ios,obsoleted=1,message="Conference history is no longer supported.");
- (void)historiesWithNbEvents:(NSInteger)nbEvents lastConferenceID:(NSString * _Nullable)lastConferenceID lastConferenceTimestamp:(int64_t)lastConferenceTimestamp success:(void (^ _Nullable)(NSArray * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_AVAILABILITY(ios,obsoleted=1,message="Conference histories are no longer supported.");
- (void)historiesWithNbEvents:(NSInteger)nbEvents success:(void (^ _Nullable)(NSArray * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_AVAILABILITY(ios,obsoleted=1,message="Conference histories are no longer supported.");
- (void)positionWithParticipant:(VTParticipant * _Nonnull)participant angle:(double)angle SWIFT_AVAILABILITY(ios,obsoleted=1,message="With the new Dolby library, setting participant's 3D audio position is no longer supported.");
- (void)positionWithParticipant:(VTParticipant * _Nonnull)participant distance:(double)distance SWIFT_AVAILABILITY(ios,obsoleted=1,message="With the new Dolby library, setting participant's 3D audio position is no longer supported.");
- (void)statusSubscribeWithConference:(VTConference * _Nonnull)conference completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,obsoleted=1,message="'statusSubscribe' has been renamed to 'REPLACE_CONFERENCE_BY_NOTIFICATION.subscribe(subscription:completion:)': You can now use the notification service object to subscribe `VoxeetSDK.shared.notification.subscribe`.");
- (void)statusUnsubscribeWithConference:(VTConference * _Nonnull)conference completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,obsoleted=1,message="'statusUnsubscribe' has been renamed to 'REPLACE_CONFERENCE_BY_NOTIFICATION.unsubscribe(subscription:completion:)': You can now use the notification service object to subscribe `VoxeetSDK.shared.notification.unsubscribe`.");
- (void)subscribeWithConferenceAlias:(NSString * _Nonnull)confAlias completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,obsoleted=1);
- (void)unsubscribeWithConferenceAlias:(NSString * _Nonnull)confAlias completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,obsoleted=1);
@end

typedef SWIFT_ENUM(NSInteger, VTConferenceStatus, open) {
  VTConferenceStatusCreating = 0,
  VTConferenceStatusCreated = 1,
  VTConferenceStatusJoining = 2,
  VTConferenceStatusJoined = 3,
  VTConferenceStatusLeaving = 4,
  VTConferenceStatusLeft = 5,
  VTConferenceStatusEnded = 6,
  VTConferenceStatusDestroyed = 7,
  VTConferenceStatusError = 8,
};


SWIFT_CLASS("_TtC9VoxeetSDK30VTConferenceStatusNotification")
@interface VTConferenceStatusNotification : VTBaseNotification
/// Check if conference is live.
@property (nonatomic, readonly) BOOL live;
/// Participants.
@property (nonatomic, readonly, copy) NSArray<VTParticipant *> * _Nonnull participants;
@end

typedef SWIFT_ENUM(NSInteger, VTErrorCode, open) {
  VTErrorCodeClosureCanceled = -10000,
  VTErrorCodeSession = -10001,
  VTErrorCodeConference = -10002,
  VTErrorCodeCredential = -10003,
  VTErrorCodeAccessToken = -10004,
  VTErrorCodeDeviceIdentifier = -10005,
  VTErrorCodeData = -10006,
  VTErrorCodeUuid = -10007,
  VTErrorCodeFileNotFound = -10008,
  VTErrorCodeDolbyVoice = -10009,
  VTErrorCodeConferenceCapacityLimit = -10010,
  VTErrorCodeVideoForwarding = -10011,
  VTErrorCodeParticipant = -10012,
};


SWIFT_CLASS("_TtC9VoxeetSDK15VTFileConverted")
@interface VTFileConverted : NSObject
/// The file ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// An amount of image files.
@property (nonatomic, readonly) NSInteger imageCount;
/// The ID of a file owner.
@property (nonatomic, readonly, copy) NSString * _Nullable ownerID;
/// A file name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// A file size.
@property (nonatomic, readonly, strong) NSNumber * _Nullable size;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id imageCount:(NSInteger)imageCount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VoxeetSDK18VTFilePresentation")
@interface VTFilePresentation : NSObject
/// File identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// File owner.
@property (nonatomic, readonly, strong) VTParticipant * _Nonnull owner;
/// Number of images in the presentation.
@property (nonatomic, readonly) NSInteger imageCount;
/// Current position in the presentation.
@property (nonatomic, readonly) NSInteger position;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP9VoxeetSDK26VTFilePresentationDelegate_")
@protocol VTFilePresentationDelegate
/// Emitted when a file is converted.
- (void)convertedWithFileConverted:(VTFileConverted * _Nonnull)fileConverted;
/// Emitted when a file presentation is started.
- (void)startedWithFilePresentation:(VTFilePresentation * _Nonnull)filePresentation;
/// Emitted when a file presentation is updated.
- (void)updatedWithFilePresentation:(VTFilePresentation * _Nonnull)filePresentation;
/// Emitted when a file presentation is stopped.
- (void)stoppedWithFilePresentation:(VTFilePresentation * _Nonnull)filePresentation;
@end


SWIFT_CLASS("_TtC9VoxeetSDK25VTFilePresentationService")
@interface VTFilePresentationService : NSObject
/// Current file presentation model.
@property (nonatomic, readonly, strong) VTFilePresentation * _Nullable current;
/// File presentation delegate.
@property (nonatomic, weak) id <VTFilePresentationDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Uploads and converts a file.
/// \param path File path.
///
/// \param progress Sets a closure to be called periodically during the lifecycle of the request as data is written to or read from the server.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)convertWithPath:(NSURL * _Nonnull)path progress:(void (^ _Nullable)(double))progress success:(void (^ _Nullable)(VTFileConverted * _Nonnull))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Starting a file presentation.
/// \param fileConverted File converted model (<code>VTFileConverted</code>).
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startWithFileConverted:(VTFileConverted * _Nonnull)fileConverted completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Updating the current page of file presented.
/// \param page Update the current page presented.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)updateWithPage:(NSInteger)page completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stopping the current file presented.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Getting an image (URL) of a file.
/// \param page file page.
///
- (NSURL * _Nullable)imageWithPage:(NSInteger)page SWIFT_WARN_UNUSED_RESULT;
/// Getting a thumbnail image (URL) of a file.
/// \param page file page.
///
- (NSURL * _Nullable)thumbnailWithPage:(NSInteger)page SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9VoxeetSDK32VTInvitationReceivedNotification")
@interface VTInvitationReceivedNotification : VTBaseNotification
@property (nonatomic, readonly, strong) VTParticipant * _Nonnull participant;
@end

@class VTJoinOptionsConstraints;

SWIFT_CLASS("_TtC9VoxeetSDK13VTJoinOptions")
@interface VTJoinOptions : NSObject
/// Sets some conference constraints before joining it.
@property (nonatomic, strong) VTJoinOptionsConstraints * _Nonnull constraints;
/// The maximum number of video streams that may be transmitted for a conference.
@property (nonatomic, strong) NSNumber * _Nullable maxVideoForwarding;
/// The conference access token used for conference operations.
@property (nonatomic, copy) NSString * _Nullable conferenceAccessToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK24VTJoinOptionsConstraints")
@interface VTJoinOptionsConstraints : NSObject
/// Sets audio on/off.
@property (nonatomic) BOOL audio;
/// Sets video on/off.
@property (nonatomic) BOOL video;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK15VTListenOptions")
@interface VTListenOptions : NSObject
/// The maximum number of video streams that may be transmitted for a conference.
@property (nonatomic, strong) NSNumber * _Nullable maxVideoForwarding;
/// The conference access token used for conference operations.
@property (nonatomic, copy) NSString * _Nullable conferenceAccessToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RTCVideoRenderer;

SWIFT_CLASS("_TtC9VoxeetSDK20VTMediaDeviceService")
@interface VTMediaDeviceService : NSObject
/// Check the default camera behaviour.
@property (nonatomic, readonly) BOOL isDefaultFrontFacing;
/// Check if the device is currently using the front or back camera.
@property (nonatomic, readonly) BOOL isFrontCamera;
/// Gets the current stream of a user.
/// \param userID User ID.
///
///
/// returns:
/// The stream to be rendered into the view.
- (MediaStream * _Nullable)mediaStreamWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Gets the current screen share stream.
///
/// returns:
/// The stream to be rendered into the view.
- (MediaStream * _Nullable)screenShareMediaStream SWIFT_WARN_UNUSED_RESULT;
/// Attaches a media stream to a renderer. You can create a renderer with a UIView that inherits from <code>VTVideoView</code>.
/// \param stream The stream to be rendered into the view.
///
/// \param renderer The view renderer that will display the video.
///
- (void)attachMediaStream:(MediaStream * _Nonnull)stream renderer:(id <RTCVideoRenderer> _Nonnull)renderer;
/// Unattaches a media stream from a renderer. If you remove the video renderer from the UI, you do not need to call this method. This method is useful for switching among several streams with the same video renderer.
/// \param stream The stream to be rendered into the view.
///
/// \param renderer The view renderer that will display the video.
///
- (void)unattachMediaStream:(MediaStream * _Nullable)stream renderer:(id <RTCVideoRenderer> _Nonnull)renderer;
/// Switches between BuiltInSpeaker and BuiltInReceiver.
- (void)switchDeviceSpeaker;
/// Switches between BuiltInSpeaker and BuiltInReceiver.
/// \param forceBuiltInSpeaker Forces the audio to get set on the main speaker if <code>true</code>. If the value is <code>false</code> the BuiltInReceiver will be forced.
///
- (void)switchDeviceSpeakerWithForceBuiltInSpeaker:(BOOL)forceBuiltInSpeaker completion:(void (^ _Nullable)(void))completion;
/// Changes the device camera (front or back).
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value.
///
- (void)switchCameraWithCompletion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class VTParticipantJoinedNotification;
@class VTParticipantLeftNotification;

SWIFT_PROTOCOL("_TtP9VoxeetSDK22VTNotificationDelegate_")
@protocol VTNotificationDelegate
/// Emitted when an invitation has been received.
- (void)invitationReceivedWithNotification:(VTInvitationReceivedNotification * _Nonnull)notification;
/// Emitted when a conference has been subscribed.
- (void)conferenceStatusWithNotification:(VTConferenceStatusNotification * _Nonnull)notification;
/// Emitted when a conference has been created.
- (void)conferenceCreatedWithNotification:(VTConferenceCreatedNotification * _Nonnull)notification;
/// Emitted when a conference has been ended.
- (void)conferenceEndedWithNotification:(VTConferenceEndedNotification * _Nonnull)notification;
/// Emitted when a participant joined a conference.
- (void)participantJoinedWithNotification:(VTParticipantJoinedNotification * _Nonnull)notification;
/// Emitted when a participant left a conference.
- (void)participantLeftWithNotification:(VTParticipantLeftNotification * _Nonnull)notification;
@end

enum VTNotificationPushType : NSInteger;

SWIFT_CLASS("_TtC9VoxeetSDK25VTNotificationPushManager")
@interface VTNotificationPushManager : NSObject
/// Notification push type.
@property (nonatomic) enum VTNotificationPushType type;
/// Includes CallKit calls in the system’s Recents list at the end of each call if true (available for iOS 11 or higher).
@property (nonatomic) BOOL includesCallsInRecents;
/// Let the notification rings until timeout (in seconds).
@property (nonatomic) double incomingCallTimeout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

SWIFT_AVAILABILITY(ios,introduced=10)
@interface VTNotificationPushManager (SWIFT_EXTENSION(VoxeetSDK)) <UNUserNotificationCenterDelegate>
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@class PKPushRegistry;
@class PKPushCredentials;
@class PKPushPayload;

@interface VTNotificationPushManager (SWIFT_EXTENSION(VoxeetSDK)) <PKPushRegistryDelegate>
- (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didUpdatePushCredentials:(PKPushCredentials * _Nonnull)pushCredentials forType:(PKPushType _Nonnull)type;
- (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWithPayload:(PKPushPayload * _Nonnull)payload forType:(PKPushType _Nonnull)type;
- (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWithPayload:(PKPushPayload * _Nonnull)payload forType:(PKPushType _Nonnull)type withCompletionHandler:(void (^ _Nonnull)(void))completion;
- (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didInvalidatePushTokenForType:(PKPushType _Nonnull)type;
@end

typedef SWIFT_ENUM(NSInteger, VTNotificationPushType, open) {
  VTNotificationPushTypeNone = 0,
  VTNotificationPushTypeCallKit = 1,
  VTNotificationPushTypeStandard = 2,
};

@class VTSubscribeBase;
@class VTParticipantInfo;

SWIFT_CLASS("_TtC9VoxeetSDK21VTNotificationService")
@interface VTNotificationService : NSObject
/// Notification push manager.
@property (nonatomic, readonly, strong) VTNotificationPushManager * _Nonnull push;
/// Notification delegate.
@property (nonatomic, weak) id <VTNotificationDelegate> _Nullable delegate;
@property (nonatomic) enum VTNotificationPushType type SWIFT_DEPRECATED_MSG("", "type");
@property (nonatomic) BOOL includesCallsInRecents SWIFT_DEPRECATED_MSG("", "includesCallsInRecents");
@property (nonatomic) double incomingCallTimeout SWIFT_DEPRECATED_MSG("", "incomingCallTimeout");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Subscribes to all status updates for a specified conference, such as added/removed participants and conference ended, within a notification and without joinning the conference.
/// \param subscriptions Turns on the subscription for the specified notifications.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)subscribeWithSubscriptions:(NSArray<VTSubscribeBase *> * _Nonnull)subscriptions completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Unsubscribes from status updates notifications for the specified conference.
/// \param subscriptions Turns off the subscription for the specified notifications.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)unsubscribeWithSubscriptions:(NSArray<VTSubscribeBase *> * _Nonnull)subscriptions completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Invites participants to a conference.
/// \param conference The conference you want to invite participants to.
///
/// \param participantInfos An array of <code>VTParticipantInfo</code> for participants to invite.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)inviteWithConference:(VTConference * _Nonnull)conference participantInfos:(NSArray<VTParticipantInfo *> * _Nonnull)participantInfos completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Declines a call.
/// \param conference Conference model.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)declineWithConference:(VTConference * _Nonnull)conference completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


@interface VTNotificationService (SWIFT_EXTENSION(VoxeetSDK))
- (void)inviteWithConference:(VTConference * _Nonnull)conference externalIDs:(NSArray<NSString *> * _Nonnull)externalIDs completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "inviteWithConference:participantInfos:completion:");
@end

enum VTParticipantType : NSInteger;
enum VTParticipantStatus : NSInteger;

SWIFT_CLASS("_TtC9VoxeetSDK13VTParticipant")
@interface VTParticipant : NSObject
/// Participant identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Participant information.
@property (nonatomic, readonly, strong) VTParticipantInfo * _Nonnull info;
/// Participant type.
@property (nonatomic, readonly) enum VTParticipantType type;
/// Participant status.
@property (nonatomic, readonly) enum VTParticipantStatus status;
/// Participant streams.
@property (nonatomic, readonly, copy) NSArray<MediaStream *> * _Nonnull streams;
@property (nonatomic, readonly) double angle SWIFT_DEPRECATED_MSG("With the new Dolby library, `angle` from 3D audio is no longer supported (will soon be obsolete).");
@property (nonatomic, readonly) double distance SWIFT_DEPRECATED_MSG("With the new Dolby library, `distance` from 3D audio is no longer supported (will soon be obsolete).");
@property (nonatomic, readonly) BOOL mute SWIFT_DEPRECATED_MSG("With the new Dolby library, `mute` is no longer supported (will soon be obsolete). Use `VoxeetSDK.shared.conference.isMuted()` to gets the current mute state of the local participant.");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK17VTParticipantInfo")
@interface VTParticipantInfo : NSObject
@property (nonatomic, copy) NSString * _Nullable externalID;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable avatarURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExternalID:(NSString * _Nullable)externalID name:(NSString * _Nullable)name avatarURL:(NSString * _Nullable)avatarURL OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK31VTParticipantJoinedNotification")
@interface VTParticipantJoinedNotification : VTBaseNotification
/// Participant.
@property (nonatomic, readonly, strong) VTParticipant * _Nonnull participant;
@end


SWIFT_CLASS("_TtC9VoxeetSDK29VTParticipantLeftNotification")
@interface VTParticipantLeftNotification : VTBaseNotification
/// Participant.
@property (nonatomic, readonly, strong) VTParticipant * _Nonnull participant;
@end


SWIFT_CLASS("_TtC9VoxeetSDK24VTParticipantPermissions")
@interface VTParticipantPermissions : NSObject
/// Conference participant.
@property (nonatomic, strong) VTParticipant * _Nonnull participant;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VTQuality : NSInteger;

SWIFT_CLASS("_TtC9VoxeetSDK20VTParticipantQuality")
@interface VTParticipantQuality : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic) enum VTQuality quality;
- (nonnull instancetype)initWithQuality:(enum VTQuality)quality OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id quality:(enum VTQuality)quality OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VTParticipantStatus, open) {
/// Participant connection status reserved.
  VTParticipantStatusReserved = 0,
/// Participant has no stream.
  VTParticipantStatusInactive = 1,
/// Participant declined the invitation.
  VTParticipantStatusDecline = 2,
/// Participant is connecting.
  VTParticipantStatusConnecting = 3,
/// Participant is connected.
  VTParticipantStatusConnected = 4,
/// Participant left the conference.
  VTParticipantStatusLeft = 5,
/// Participant connection status warning.
  VTParticipantStatusWarning = 6,
/// Participant connection status error.
  VTParticipantStatusError = 7,
/// Participant has been kicked.
  VTParticipantStatusKicked = 8,
};

typedef SWIFT_ENUM(NSInteger, VTParticipantType, open) {
  VTParticipantTypeNone = 0,
  VTParticipantTypeUser = 1,
  VTParticipantTypePstn = 2,
  VTParticipantTypeListener = 3,
  VTParticipantTypeMixer = 4,
};

typedef SWIFT_ENUM(NSInteger, VTQuality, open) {
  VTQualitySd = 0,
  VTQualityMd = 1,
  VTQualityHd = 2,
};

enum VTRecordingStatus : NSInteger;

SWIFT_PROTOCOL("_TtP9VoxeetSDK19VTRecordingDelegate_")
@protocol VTRecordingDelegate
- (void)recordingStatusUpdatedWithStatus:(enum VTRecordingStatus)status participant:(VTParticipant * _Nullable)participant startTimestamp:(NSNumber * _Nullable)startTimestamp;
@end


SWIFT_CLASS("_TtC9VoxeetSDK18VTRecordingService")
@interface VTRecordingService : NSObject
/// Recording delegate.
@property (nonatomic, weak) id <VTRecordingDelegate> _Nullable delegate;
/// Recording status state.
@property (nonatomic, readonly) enum VTRecordingStatus status;
/// Check the recording status state.
@property (nonatomic, readonly) BOOL isRecording;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Records a conference so you can replay it after it ends.
/// \param fireInterval Useful when replaying a conference with an offset (in milliseconds). Allows the video stream to be more or less reactive depending on the length of the record. By default at 10000 milliseconds.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startWithFireInterval:(NSInteger)fireInterval completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stops the current recording (a recording needs to be started before with <code>startRecording</code> method).
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

typedef SWIFT_ENUM(NSInteger, VTRecordingStatus, open) {
  VTRecordingStatusNotRecording = 0,
  VTRecordingStatusRecording = 1,
};


SWIFT_CLASS("_TtC9VoxeetSDK15VTReplayOptions")
@interface VTReplayOptions : NSObject
/// The recording offset from the beginning of the conference. In milliseconds (default <code>0</code>).
@property (nonatomic) NSInteger offset;
/// The conference access token used for conference operations.
@property (nonatomic, copy) NSString * _Nullable conferenceAccessToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum VTSessionState : NSInteger;

SWIFT_PROTOCOL("_TtP9VoxeetSDK17VTSessionDelegate_")
@protocol VTSessionDelegate
- (void)sessionUpdatedWithState:(enum VTSessionState)state;
@end


SWIFT_CLASS("_TtC9VoxeetSDK16VTSessionService")
@interface VTSessionService : NSObject
/// Current session user.
@property (nonatomic, readonly, strong) VTParticipant * _Nullable participant;
/// Push token for VoIP notifications.
@property (nonatomic, copy) NSString * _Nullable pushToken;
/// Getting current session state.
@property (nonatomic, readonly) enum VTSessionState state;
/// Session delegate.
@property (nonatomic, strong) id <VTSessionDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This method is optional. Connect a session is like a login, however the SDK needs to be initialized with <code>connectSession</code> sets to <code>false</code>. This method can be useful if CallKit is implemented (VoIP push notifications) because once the session is openned, notifications can be received if there is an invitation.
/// \param info User information to be linked to our server.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)openWithInfo:(VTParticipantInfo * _Nullable)info completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// This method is optional. Close a session is like a logout, it will stop the socket and stop sending VoIP push notification.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)closeWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


typedef SWIFT_ENUM(NSInteger, VTSessionState, open) {
  VTSessionStateConnecting = 0,
  VTSessionStateConnected = 1,
  VTSessionStateReconnecting = 2,
  VTSessionStateDisconnected = 3,
};


SWIFT_CLASS("_TtC9VoxeetSDK15VTSubscribeBase")
@interface VTSubscribeBase : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VoxeetSDK28VTSubscribeConferenceCreated")
@interface VTSubscribeConferenceCreated : VTSubscribeBase
- (nonnull instancetype)initWithConferenceAlias:(NSString * _Nonnull)conferenceAlias OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK26VTSubscribeConferenceEnded")
@interface VTSubscribeConferenceEnded : VTSubscribeBase
- (nonnull instancetype)initWithConferenceAlias:(NSString * _Nonnull)conferenceAlias OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK21VTSubscribeInvitation")
@interface VTSubscribeInvitation : VTSubscribeBase
- (nonnull instancetype)initWithConferenceAlias:(NSString * _Nonnull)conferenceAlias OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK28VTSubscribeParticipantJoined")
@interface VTSubscribeParticipantJoined : VTSubscribeBase
- (nonnull instancetype)initWithConferenceAlias:(NSString * _Nonnull)conferenceAlias OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK26VTSubscribeParticipantLeft")
@interface VTSubscribeParticipantLeft : VTSubscribeBase
- (nonnull instancetype)initWithConferenceAlias:(NSString * _Nonnull)conferenceAlias OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VTTelemetryPlatform, open) {
  VTTelemetryPlatformNative = 0,
  VTTelemetryPlatformCordova = 1,
  VTTelemetryPlatformReactNative = 2,
};


SWIFT_CLASS("_TtC9VoxeetSDK18VTTelemetryService")
@interface VTTelemetryService : NSObject
/// Tells the telemetry service which platform is in use.
@property (nonatomic) enum VTTelemetryPlatform platform;
/// Enables / Disables DVC dump upload.
@property (nonatomic) BOOL dolbyVoiceDebug;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VoxeetSDK19VTVideoPresentation")
@interface VTVideoPresentation : NSObject
/// Participant that started the presentation.
@property (nonatomic, readonly, strong) VTParticipant * _Nonnull participant;
/// URL of the video presentation.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// Current timestamp of the presentation (used for seek/pause).
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP9VoxeetSDK27VTVideoPresentationDelegate_")
@protocol VTVideoPresentationDelegate
/// Emitted when a video presentation is started.
- (void)startedWithVideoPresentation:(VTVideoPresentation * _Nonnull)videoPresentation;
/// Emitted when a video presentation is stopped.
- (void)stoppedWithVideoPresentation:(VTVideoPresentation * _Nonnull)videoPresentation;
/// Emitted when a video presentation is played.
- (void)playedWithVideoPresentation:(VTVideoPresentation * _Nonnull)videoPresentation;
/// Emitted when a video presentation is paused.
- (void)pausedWithVideoPresentation:(VTVideoPresentation * _Nonnull)videoPresentation;
/// Emitted when a video presentation is sought.
- (void)soughtWithVideoPresentation:(VTVideoPresentation * _Nonnull)videoPresentation;
@end

enum VTVideoPresentationState : NSInteger;

SWIFT_CLASS("_TtC9VoxeetSDK26VTVideoPresentationService")
@interface VTVideoPresentationService : NSObject
/// Current video presentation model.
@property (nonatomic, readonly, strong) VTVideoPresentation * _Nullable current;
/// Video presentation state.
@property (nonatomic, readonly) enum VTVideoPresentationState state;
/// Video presentation delegate.
@property (nonatomic, weak) id <VTVideoPresentationDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Starting a video presentation.
/// \param url Video URL.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stopping the current video presented.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Playing a paused video.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)playWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Pausing a presented video.
/// \param timestamp Offset in millisecond.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)pauseWithTimestamp:(NSInteger)timestamp completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Seeking and jumping to time offset.
/// \param timestamp Offset in millisecond.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)seekWithTimestamp:(NSInteger)timestamp completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

typedef SWIFT_ENUM(NSInteger, VTVideoPresentationState, open) {
/// Presentation is stopped.
  VTVideoPresentationStateStopped = 0,
/// Presentation is playing.
  VTVideoPresentationStatePlaying = 1,
/// Presentation is paused.
  VTVideoPresentationStatePaused = 2,
};

@class RTCVideoFrame;
@protocol RTCVideoViewShading;
@class NSCoder;

SWIFT_CLASS("_TtC9VoxeetSDK11VTVideoView")
@interface VTVideoView : RTCEAGLVideoView
/// Enable or disable a mirror effect.
@property (nonatomic) IBInspectable BOOL mirrorEffect;
/// By default the video fits its renderer, this option allows to fill it.
@property (nonatomic) IBInspectable BOOL contentFill;
/// Uses Metal instead of OpenGL renderer (experimental feature not recommanded for production).
@property (nonatomic) IBInspectable BOOL metal;
- (void)layoutSubviews;
- (void)setSize:(CGSize)size;
- (void)renderFrame:(RTCVideoFrame * _Nullable)frame;
- (nonnull instancetype)initWithFrame:(CGRect)frame shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK9VoxeetSDK")
@interface VoxeetSDK : NSObject
/// Voxeet SDK singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VoxeetSDK * _Nonnull shared;)
+ (VoxeetSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Session service (socket related).
@property (nonatomic, readonly, strong) VTSessionService * _Nonnull session;
/// Conference service.
@property (nonatomic, readonly, strong) VTConferenceService * _Nonnull conference;
/// Recording service.
@property (nonatomic, readonly, strong) VTRecordingService * _Nonnull recording;
/// Command service.
@property (nonatomic, readonly, strong) VTCommandService * _Nonnull command;
/// Media device service.
@property (nonatomic, readonly, strong) VTMediaDeviceService * _Nonnull mediaDevice;
/// Push notification service.
@property (nonatomic, strong) VTNotificationService * _Nonnull notification;
/// File presentation service.
@property (nonatomic, readonly, strong) VTFilePresentationService * _Nonnull filePresentation;
/// Video presentation service.
@property (nonatomic, readonly, strong) VTVideoPresentationService * _Nonnull videoPresentation;
/// Telemetry service.
@property (nonatomic, readonly, strong) VTTelemetryService * _Nonnull telemetry;
/// Custom app group & preferred extension for broadcasting.
@property (nonatomic, copy) NSString * _Nullable appGroup;
@property (nonatomic, copy) NSString * _Nullable preferredExtension;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializing the Voxeet SDK.
/// \param consumerKey To get a consumer key, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param consumerSecret To get a consumer secret, you need to contact Voxeet in order to use the Voxeet SDK.
///
- (void)initializeWithConsumerKey:(NSString * _Nonnull)consumerKey consumerSecret:(NSString * _Nonnull)consumerSecret;
/// Initializing the Voxeet SDK with a custom OAuth server.
/// \param accessToken A valid tokenAccess obtained from your own Oauth2 server.
///
/// \param refreshTokenClosureWithParam This closure will be called when the access token needs to be refreshed from your server. Inside this one, refresh your access token and use the closure parameter to notify Voxeet of the change: <code>closure("token")</code>. You can also check with the boolean parameter if the token has expired.
///
- (void)initializeWithAccessToken:(NSString * _Nonnull)accessToken refreshTokenClosureWithParam:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable), BOOL))refreshTokenClosureWithParam;
/// Allows to request for a specific region. This method must be called after initialize and before opening a session.
/// \param region Specific region.
///
- (void)region:(NSString * _Nullable)region;
/// Blacklisting / Unblacklisting an external ID to not receive notifications from this user anymore.
/// \param externalID The external ID is setted when initializing the SDK (<code>userInfo</code> parameter).
///
/// \param ban Ban (true) / unban (false) an external user.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)blacklistWithExternalID:(NSString * _Nonnull)externalID ban:(BOOL)ban completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


@interface VoxeetSDK (SWIFT_EXTENSION(VoxeetSDK))
- (void)initializeWithAccessToken:(NSString * _Nonnull)accessToken refreshTokenClosure:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nonnull)))refreshTokenClosure SWIFT_AVAILABILITY(ios,obsoleted=1,message="'initialize' has been renamed to 'initializeWithAccessToken:refreshTokenClosureWithParam:': The refresh token closure now takes a new boolean parameter to check if the previous token has been expired (also needs to update the previous callback with `(closure, isExpired) in`).");
@end


SWIFT_CLASS("_TtC9VoxeetSDK9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
